.row{
    /* maximum width is 1140px */
    /* difference b/w max-width and width is max-width occupy the total decladed width but in case view port width is less than max-width the max-width occupy 100% view port; */
    /*because what we actually want is not width but max-width.
     What's the difference between width and max-width?

    Now let me actually show it to you in here.

    So the max-width of this is 114 pixels, right?

    Now decrease the screen like this,

    then you will see that everything starts to adapt

    to the width of the screen.

    So max-width means

    is that if we have enough available space,

    then it will have the width that we specified

    but if there is not enough width,

    so basically if the viewport is smaller

    than width that we specified here,

    so in this case, if the viewport is smaller than 114 rem,

    then it will simply fill 100% of the available space*/

    max-width:$grid-width;
    
   // background-color:#eee;
    /* this is trick to cernter a row to and bottom 0 and left and right is auto*/
    margin: 0 auto;
    margin-bottom:$gutter-vertical;

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem;
    }
   
    /* not-psedo class : does work as not oprator which mean every things applay to element expect element which in not-psudeo class*/
    /* The negation pseudo-class, :not(X), is a functional notation taking a simple selector (excluding the negation pseudo-class itself) as an argument.
     It represents an element that is not represented by its argument.*/
    &:not(:last-child){
        margin-bottom:$gutter-vertical;
        @include respond(tab-port) {
            margin-bottom:$gutter-vertical-small !important;
        }
    }
     @include clearfix;
    /* [] - > this is attribute selector and we can write regex to select arrtribute here we use reex -- class^="col-" mean class have starting with col-*/
     [class^="col-"]{
           /* background-color:orangered;*/
            float:left;

            &:not(:last-child) {
                     margin-right: $gutter-horizontal;
                     @include respond(tab-port) {
                         margin-right: 0;
                         margin-bottom:$gutter-vertical-small !important;
                     }
             }
             @include respond(tab-port) {
                 width:100% !important;
             }

     }
    .col-1-of-2{
        // because in the calc function of CSS, if you want to use a Sass variable, 
       // we have to actually do this little thing. We have to use the hash,
       // and then wrap it into these curly braces,
        width:calc((100% - #{$gutter-horizontal})/2);
    }
    .col-1-of-3{
        width:calc((100%  -  (2*(#{$gutter-horizontal})))/3);
       
    }
    .col-1-of-4{
        width:calc((100% - (3*(#{$gutter-horizontal})))/4);
    }

    .col-2-of-3{
        width:calc(2*(100% - (2*(#{$gutter-horizontal})))/3 + #{$gutter-horizontal});
    }

    .col-2-of-4{
         width:calc(2*(100% - 3*#{$gutter-horizontal})/4 + #{$gutter-horizontal});   
    }

    .col-3-of-4{
        width:calc(3*(100% - 3*#{$gutter-horizontal})/4 + 2*#{$gutter-horizontal});
    }
   
}